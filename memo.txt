


http://www.astroarts.co.jp/alacarte/kiso/index-j.shtml


太陽が南中（真南にくる瞬間）してから次に南中するまでの時間を真太陽日といいます。
真太陽日の1日の始まりは太陽の時角+12時間と決められています。


平均太陽、平均太陽日、平均太陽時
天の赤道上を一定の速度で移動する太陽を仮想し、平均太陽と呼ぶことにしたのです。
この平均太陽が南中してから、次に南中するまでの時間は季節を問わず常に一定となります。
平均太陽日をもとに決められた時刻を平均太陽時といいます（下図）。

なぜなら
太陽は天の赤道に対して23ﾟ27'傾いた黄道上を1年かかって移動しており、しかも一定の速度で動いているわけではありません。
これは、地球の軌道がわずかに楕円軌道を描いているため.真太陽日の1日の長さは絶えず変化しています。
1日の時間が日によって違ってしまうのでは困ってしまいます。


グレゴリオ暦とユリウス暦


ユリウス暦の1582年10月5日をグレゴリオ暦の10月15日とし、現在のグレゴリオ暦に切り替えました。

地球が太陽を1周するのに要する日数（1回帰年=365.2422日）を365日

補正 

グレゴリオ暦
4年に1度の閏年
100で割り切れる年を平年
400で割り切れる年は閏年

ユリウス暦
4年に1度の閏年




Civil twilight uses the value –6 degrees.
Nautical twilight uses the value –12 degrees.
Astronomical twilight uses the value –18 degrees.



ユリウス日（Julian Day:JD）は、世界時の-4712年（BC4713年）1月1日12時を0とした通日の値です。
ユリウス日の1日は世界時の正午に始まります。そして時刻は日の小数として表されます。

準ユリウス日
1858年11月17日0時（UT）JD=2400000.5日を新起算日とする準ユリウス日（Modified Julian Day:MJD）


地平座標
(Apparent Topocentric Position)

Azimuth (方向A) 南を起点(0度)に西回りに360度
Altitude (高さh) 水平線を基点に天頂が+90度, 天底が-90度

疑問点: 南極点、北極点ではどうなるのだ？ ... 特異点

http://ja.wikipedia.org/wiki/%E5%A4%A9%E7%90%83%E5%BA%A7%E6%A8%99%E7%B3%BB
赤道座標系との返還式


赤道座標(Equatorial)

α、right ascension, RA(赤経)/H時角, 
 度 (degree) ではなく時 (hour) を単位として表す
δ、declination(赤緯)


地球の赤道を天球に投影した大円を天の赤道と呼ぶ。同様に、地球の北極・南極を投影した点を天の北極・天の南極と呼ぶ。

注：測地系によって赤道が変わってくる。

上で述べた歳差と章動があるため、長い期間を隔てた観測データを扱う場合には、
惑星や恒星、銀河などの天体の座標位置を指定する際に元期を指定する必要がある。
2005年現在、元期には通常 J2000.0 が用いられる。古い観測値では B1950.0 が使われている場合もある。


黄道座標(Ecliptic)

黄経（こうけい:λ）
  春分点起点、東回り up to 360度
黄緯（こうい:β）
  黄道が起点、北+(90)、南-(90)


銀河座標

銀緯（ぎんい、galactic latitude: b）
  銀緯は銀河面を天球上に投影した銀河赤道を0度 = 天の川
銀経（ぎんけい、galactic longitude: l）
 具体的には1959年に IAU によって、B1950.0 分点における赤経12h49m、赤緯+27°24' の点が銀河北極と定義された。
 現在使われている J2000.0 分点では赤経12h51m26.282s、赤緯+27°07'42.01" となる。


位置天文学
http://ja.wikipedia.org/wiki/%E4%BD%8D%E7%BD%AE%E5%A4%A9%E6%96%87%E5%AD%A6



日周運動 - 地球の自転
年周運動 - 地球の公転

歳差運動



http://www.astroarts.co.jp/alacarte/kiso/kiso06-j.shtml
日中の太陽 -27等級
金星や月がかろうじて見える 何等級？

http://www.pit-japan.com/ws30/d_range01.html
人間の目のダイナミックレンジも大事
 同時にみることができるダイナミックレンジもあるんじゃないか？「海賊船長」

視点の中心の明るさを考慮した、明るさのマッピングみたいなことをするといいのかもしれない。

HDRか。
quote
---------------
　そこで、3Dゲームグラフィックスの世界でも、
(A)現実世界に近いダイナミックレンジでシーンをレンダリングする
(B)人間の視覚システムを模倣した形で、そのシーンのピーク輝度から一定範囲の色のみをディスプレイで
表示可能な1,677万色にまるめこむ
としたほうが、「見た目としてリアル」になるんじゃないだろうかという仮定の下、生まれ出でてきたアイディアが
HDRレンダリングだ。
　用語的な定義としては(A)そのものがHDRレンダリングを指し、(B)は特に「トーンマッピング(Tone Mapping)」と呼ぶが
今や一般的には(A)(B)の処理系全体をそう呼ぶことが多い。
---------------

http://news.mynavi.jp/column/graphics/041/index.html
3Dグラフィックス・マニアックス
HDRレンダリング(1)～HDRレンダリングとは?



> ステラナビゲータ での日食は、ダイヤモンドリング、コロナを表示することができますが、
> これは表示のタイミングを計算によって求めているだけで、実際のダイヤモンドリングや
> コロナの位置や形をシミュレートしているものではありません。
歳差運動がないとどうなんだろうか？
たぶん関係ない。

大事なのは白道と黄道（交差するが重なっていない。)
http://www.ffortune.net/fortune/astro/coordinate.htm





pythonのライブラリ

pyfits
  fits形式を読み込むライブラリ(?)
  http://packages.python.org/pyfits/users_guide/users_tutorial.html

pyraf
  ? データ処理用のライブラリらしい（？）

pyephem http://rhodesmill.org/pyephem/
  ざっくりだが、観測場所とかつっこんでやると、月とか太陽の位置を計算するらしい。
  見た目完成度高そう


Votable.py http://www.euro-vo.org/internal/Avo/PyVOTools/
 説明なし。tarballがある


fits と DS9はファイル/データフォーマットのようだ
 fitsは画像ファイルのようだ



IRAFは天文関係の処理系？(MIDASも？)



とりあえず、hip_main.datを読むことを目指す。 |区切りのようだ。
readmeにformatがある。

H|           1| |00 00 00.22|+01 05 20.4| 9.10| |H|000.00091185|+01.08901332| |   3.54|   -5.20|   -1.88|  1.32|  0.74|  1.39|  1.36|  0.81| 0.32|-0.07|-0.11|-0.24| 0.09|-0.01| 0.10|-0.01| 0.01| 0.34|  0| 0.74|     1| 9.643|0.020| 9.130|0.019| | 0.482|0.025|T|0.55|0.03|L| | 9.2043|0.0020|0.017| 87| | 9.17| 9.24|       | | | |          | |  | 1| | | |  |   |       |     |     |    |S| | |224700|B+00 5077 |          |          |0.66|F5          |S 

Byte-by-byte Description of file: hip_main.dat
を読んでparserを生成したいなぁ・・・

parser = ParserBuilder(Description)

with open('hip_main') as f
    for line in f:
        entry = parse(line)
        print entry.HIP, entry.RAhms, entry.DEdms

とかできるようにしたい。




---

test = ephem.FixedBody(epoch=ephem.J2000, g_dec=0, g_ra=0)

tokyo = ephem.Observer()
tokyo.lat = 35.0
tokyo.lon = 139.0
tokyo.elevation = 40

test.compute(tokyo)


とかすればよさげ。
しかし年周視差のある天体はどうなるのだろう？

http://oneau.wordpress.com/2010/07/04/astrometry-in-python-with-pyephem/#bodies-from-database
とかからがんばるか？

hipにはPlxという形で入っている。視差の方向も必要だが・・・


XEphemのマニュアル(5.1 Sky View mouse)にはこうある・・・無限遠扱いなのか？！ 
 The coordinates are derived directly from the screen location and know
 nothing of the displayed objects. Thus, they neglect parallax (i.e., assume
 everything is at infinity).


from http://ja.wikipedia.org/wiki/%E5%B9%B4%E5%91%A8%E8%A6%96%E5%B7%AE

地動説に基づいて古くからその存在が仮定されていたが、年周視差の大きさは非常に
小さいためにその観測は非常に困難であった。もっとも地球に近い恒星である
ケンタウルス座α星でも年周視差はわずか0.76秒である。これは271m先にある物体を
1mmずらしたときに発生する視差を検出することに等しい

うーむ、計算してないのはこの辺か。


HipparcosのデータがJ2000なのか確認 J1991.25かも？ -> Ephemではどうなるのか？
     expressed in degrees for epoch J1991.25 (JD2448349.0625 (TT)) in the

Note on RAdeg, DEdeg: right ascension and declination are
     expressed in degrees for epoch J1991.25 (JD2448349.0625 (TT)) in the
     ICRS (International Celestial Reference System, consistent with
     J2000) reference system.
     There are 263 cases where these fields are missing (no astrometric
     solution could be found)

ロードして計算できるようにする。
名前をHipparcosのnumbringで。


FixedBodyの引数にパラメータを渡しても無視されるので、
    s = ephem.FixedBody()
    s._epoch=JD1991_25
    s._ra=c["RAdeg"]
    s._dec=c["DEdeg"]#, Name="HIP=%i"%(c["HIP"]))
とかする。


http://en.wikipedia.org/wiki/List_of_stars_in_the_Hipparcos_Catalogue
とか確認に使う



     
EphemのDateは Dublin JD。

http://en.wikipedia.org/wiki/Julian_day

         The Dublin Julian Date (DJD) is the number of days that has elapsed
         since the epoch of the solar and lunar ephemerides used from 1900
         through 1983, Newcomb's Tables of the Sun and Ernest W. Brown's
         Tables of the Motion of the Moon (1919). This epoch was noon UT on
         January 0, 1900, which is the same as noon UT on December 31, 1899.
         The DJD was defined by the International Astronomical Union at their
         1955 meeting in Dublin, Ireland.[7]



Polaris is HIP 11767... got  HIP=11767
ra should be 2h31m49.09s, dec should be +89 15.50'50.8"
 from Wikipedia, J2000

http://www.alcyone.de/SIT/mainstars/SIT000816.htm
 data from The Bright Star Catalogue, 5th Revised Ed. (Preliminary Version) (Hoffleit+, 1991)
  J2000 1h31min48.7sec +89-15'51"
  J1900 1h22min33.7sec +88-46'26"

 data from SKY2000 - Master Star Catalog (Myers+ 1997)
  J2000 2h31min48.704sec +89-15'50'72"

 data from Smithsonian Astrophysical Observatory Star Catalog (SAO Staff 1966; USNO, ADC 1990)
  J1950 1h48min48.786sec +89-1'43.74"
  J2000 2h31min48.711sec +89-15'50.64"


http://simbad.u-strasbg.fr/simbad/sim-id?Ident=Polaris
 


Polarisの各種星表(star catalogue)
でのID
 12H UMi, 2B UMi, 1H' UMi,
 HR 424, HD 8890,
 BD+88°8,
 HIP 11767, SAO 308,
 GC 2243, BAC 360, FK5 907, ADS 1477, CCDM 02319+8915.


http://www.stargazing.net/kepler/altaz.html
Converting RA and DEC to ALT and AZ

EOD (Equinox of Date)


in __init__.py of ephem

# We make available several basic types from _libastro.

Angle = _libastro.Angle
degrees = _libastro.degrees
hours = _libastro.hours


in astro.h
#define	raddeg(x)	((x)*180./PI)

in _libastro.c

static PyObject* build_degrees(double radians)
{
     return new_Angle(radians, raddeg(1));
}

static PyObject* new_Angle(double radians, double factor)
{
     AngleObject *ea;
     ea = PyObject_NEW(AngleObject, &AngleType);
     if (ea) {
	  ea->f.ob_fval = radians;
	  ea->factor = factor;
     }
     return (PyObject*) ea;
}


sqliteでmemoryにロードするようにする？
http://www.sqlite.org/inmemorydb.html

diskへのbackup機能
http://www.sqlite.org/c3ref/backup_finish.html#sqlite3backupinit
これとmemoryとのコンボで一回ロードしたらbackupを使い続ける、とかか。

pysqliteだとこれか？
In [42]: conn.iterdump?
Type:       builtin_function_or_method
String Form:<built-in method iterdump of pysqlite2.dbapi2.Connection object at
0x251cb10>
Docstring:  Returns iterator to the dump of the database in an SQL text
format. Non-standard.



WCSTools libwcs/binread.cのbinread/binopen/binstar関数を参考に

in binstar
    /* Interpret catalog number */
        switch (sc->stnum) {
以下がbinary dataをfileから読み出している。


SAOのバイナリをparseすることはgive up.
headerの仕様に書いてあるentry長とentry長を指定するフィールドに書いてあるentry長が一致しない。



http://www.fukuoka-edu.ac.jp/~kanamitu/fits/tebiki3/4-wcs.html
現在の FITSスタンダードでは座標表現に関しては簡単な変換に対応したいくつかのキーワード(CRVALn, CRPIX}n, CDELTn, CTYPEn,
CROTAn)しか定義されておらず、実際の天球座標とデータ配列の間の対応を表現するには不十分な点があった。
それを補うために(特に AIPSの開発過程において)より一般的な表現方法として提案されているのが World
Coordinates System である。ここでは、次の文献の概要を解説する。


データ配列がデジタルイメージを表わしている場合、データ配列と物理画像との変換はピクセルのうちのどこが
(中心かコーナーか)データ点か、ということを知る必要がある。歴史的にいうと、天文学者は一般的に FITS
ファイルの中のインデックスはピクセルの中心を表わすと仮定してきた。(この解釈は、上記論文でも是認されている。)
これはコンピュータグラフィクスで一般的な、ピクセルの中心は .5 の点に対応する、という慣例とは異なっている。 FITS
ファイルでのピクセルは、通常、物理空間の体積要素とみなされ、変換や回転によっては別の視点から見られる可能性がある。
そのような操作をした時、要素の中心だけが不変である。現在は、天文のコミュニティではこれに関する標準の規約が決まって
いないので、FITSファイル作成者は適切なコメントによって、(COMMENT キーワードを使って)
そのファイルがどのような規約に従っているか、を読み取りプログラムがわかるようにすべきである。

データ配列の中の順序と、表示されたイメージの中の位置との関係(例えば、最初のピクセルが、一番上なのか下なのか)
もまた規約の問題である。 上記論文によると、FITS ファイル作成者は、最初のピクセルが画像の左下隅であり、
続くピクセルは画像の右方向へ(直交座標のx-軸のように)並び、それが順次上方向へ(y-軸)へと続く、ように並べることを推奨している。
この規約は、現行の CRVALnなどのキーワードを使った座標軸の表現を置き換えるものではない。 


これは、観測範囲と極座標系のデータをつきあわせるときに参考になりそう。



